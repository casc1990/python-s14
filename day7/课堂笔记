静态方法：
        @staticmethod 表示下面的方法是静态方法
        静态方法只是属于类，和类没什么关系，就是一个普通函数.所以静态方法不能访问实例变量和类变量
类方法：
        @classmethod 表示下面的方法是类方法
        类方法可以访问类变量,不能访问实例变量
属性方法：（隐藏实现细节）
        @property 表示下面的方法是属性方法
        @'方法名'.setter  修改属性方法函数（修改的只是函数里定义的变量，修改时才会执行这个方法）
        @'方法名'.deleter 删除属性方法函数（删除的只是函数里定义的变量，删除属性是执行这个方法）
        调用属性方法就相当是调用一个类属性，不需要加()；@'方法名'.setter、@'方法名'.deleter必须出现在@property定义的方法后面

特殊方法：
        __doc__ :打印类的描述信息
        __module__：打印当前对象来自于那个模块
        __class__： 打印当前对象来自于那个模块的那个类
        __init__： 构造方法，通过类创建对象时，自动触发执行
        __del__: 析构方法，当对象在内存中被释放时，自动触发执行。
        __call__: 此函数定义在类里面。对象或者类后面加括号，触发执行。（对象或者类的二次调用）
        __dict__： 查询类和实例所有的属性和方法（类和实例的属性和方法都存储在__dict__字典里）
        __str__： 如果一个类中定义了__str__方法，那么在打印对象时，默认输出该方法的返回值。
        __getitem__：用于索引操作，如字典。表示获取数据。（可以让类支持索引操作）
        __setitem__：用于索引操作，如字典。表示设置数据
        __delitem__：用于索引操作，如字典。表示删除数据
        __new__: 创建实例的方法。（所有类的实例化都会通过__new__方法创建实例，之后才是__init__实例化方法）

总结：
    一切皆对象（类也是对象，类是type生成的）。


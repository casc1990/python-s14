什么是线程：（一堆指令）
    线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中的
    一个单一顺序的控制流，一个进程可以并发多个线程，每条线程并行执行不同的任务。
进程：（对各种资源管理的集合）---进程
    应用程序。应用程序要以一个整体的形式暴露给操作系统管理，里面包含对各种资源的调用（内存管理，网络接口等）

线程和进程的区别：
    1.线程共享创建它的进程的地址空间;进程有自己的地址空间。
    2.线程可以直接访问其进程的数据段;进程有它们自己的父进程数据段的副本。
    3.线程可以直接与进程的其他线程通信;进程必须使用进程间通信来与兄弟进程通信。
    4.新线程很容易创建;新进程需要复制父进程。
    5.线程可以对同一进程的线程进行相当大的控制;进程只能对子进程执行控制。
    6.对主线程的更改(取消、优先级更改等)可能会影响该进程的其他线程的行为;对父进程的更改不会影响子进程。

锁机制：
    线程锁(互斥锁Mutex)：
        lock = threading.Lock() 生成锁
        lock.acquire() 修改数据前加锁
        lock.release() #修改后释放
    递归锁(RLock)：程序中如果出现多个锁的时候，一定要用递归锁
        lock = threading.RLock() 生成递归锁
        lock.acquire() 修改数据前加锁
        lock.release() #修改后释放
    信号量(Semaphore)：指定同时可以有几个线程同时运行
        lock = threading.BoundedSemaphore(5) 最多允许5个线程同时运行
        lock.acquire() 修改数据前加锁
        lock.release() 修改后释放
事件(Events)：相当设置全局环境变量（标志位）
    event = threading.Event() 生成event对象
    event.set()  设置标志位
    event.clear() 清除标志位
    event.wait() 等着标志位被设定（标志位被设定，什么都不做，如果未设定，等待着被设定）
    event.is_set() 判断标志位是否被设置

队列(queue)：高效，解耦
    queue.Queue(maxsize=0) #先入先出  --默认
    queue.LifoQueue(maxsize=0) #后入先出
    queue.PriorityQueue(maxsize=0) #存储数据时可设置优先级的队列
    Queue.qsize()  #查看队列大小
    Queue.put('1')  #向队列存放数据
    Queue.put('2', block=True, timeout=None) #是否阻塞，超时时间
    Queue.get(block=True, timeout=None)  #取数据(取数据不能指定取什么数据，按队列的规则取)
    Queue.get_nowait()  #取数据不等待，没有了就抛出异常
    Queue.put_nowait() #同Queue.get_nowait()类似





